{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/swalihvpm/Desktop/Projects/django_lms/rnlms/src/Components/unitTest/Questions.js\";\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { createASNT as _createASNT } from \"../../store/actions/assignments\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { COLORS, SIZES } from \"../../Helpers/constants\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\n\nvar Quiz = function Quiz(props) {\n  var navigation = useNavigation();\n  var questions = props.questions,\n      testID = props.testID,\n      token = props.token,\n      username = props.username;\n  var allQuestions = questions;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentQuestionIndex = _useState2[0],\n      setCurrentQuestionIndex = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentOptionSelected = _useState4[0],\n      setCurrentOptionSelected = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      correctOption = _useState6[0],\n      setCorrectOption = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isOptionsDisabled = _useState8[0],\n      setIsOptionsDisabled = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      score = _useState10[0],\n      setScore = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      showNextButton = _useState12[0],\n      setShowNextButton = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      showScoreModal = _useState14[0],\n      setShowScoreModal = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      error = _useState16[0],\n      setError = _useState16[1];\n\n  var validateAnswer = function validateAnswer(selectedOption) {\n    var correct_option = allQuestions[currentQuestionIndex][\"answer\"];\n    setCurrentOptionSelected(selectedOption);\n    setCorrectOption(correct_option);\n    setIsOptionsDisabled(true);\n\n    if (selectedOption == correct_option) {\n      console.log(score);\n      setScore(score + 1);\n    }\n\n    setShowNextButton(true);\n  };\n\n  var handleSubmitTest = function handleSubmitTest() {\n    try {\n      var data = {\n        username: username,\n        testID: testID,\n        score: score\n      };\n      props.createASNT(token, data);\n    } catch (err) {\n      setError(err);\n      console.log(err);\n    }\n\n    navigation.navigate(\"UnitDetail\", {\n      id: testID\n    });\n  };\n\n  var handleNext = function handleNext() {\n    console.log(showScoreModal);\n\n    if (currentQuestionIndex == allQuestions.length - 1) {} else {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setCurrentOptionSelected(null);\n      setCorrectOption(null);\n      setIsOptionsDisabled(false);\n      setShowNextButton(false);\n    }\n\n    Animated.timing(progress, {\n      toValue: currentQuestionIndex + 1,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  };\n\n  var restartQuiz = function restartQuiz() {\n    setShowScoreModal(false);\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setCurrentOptionSelected(null);\n    setCorrectOption(null);\n    setIsOptionsDisabled(false);\n    setShowNextButton(false);\n    Animated.timing(progress, {\n      toValue: 0,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  };\n\n  var renderQuestion = function renderQuestion() {\n    var _allQuestions$current;\n\n    return React.createElement(View, {\n      style: {\n        marginVertical: 40\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: COLORS.white,\n        fontSize: 30\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, (_allQuestions$current = allQuestions[currentQuestionIndex]) == null ? void 0 : _allQuestions$current.question));\n  };\n\n  var renderOptions = function renderOptions() {\n    var _allQuestions$current2;\n\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, (_allQuestions$current2 = allQuestions[currentQuestionIndex]) == null ? void 0 : _allQuestions$current2.choices.map(function (option) {\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return validateAnswer(option);\n        },\n        disabled: isOptionsDisabled,\n        key: option,\n        style: {\n          borderWidth: 3,\n          borderColor: option == correctOption ? COLORS.success : option == currentOptionSelected ? COLORS.error : COLORS.secondary + \"40\",\n          backgroundColor: option == correctOption ? COLORS.success + \"20\" : option == currentOptionSelected ? COLORS.error + \"20\" : COLORS.secondary + \"20\",\n          height: 60,\n          borderRadius: 20,\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          paddingHorizontal: 20,\n          marginVertical: 10\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          color: COLORS.white\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, option), option == correctOption ? React.createElement(View, {\n        style: {\n          width: 30,\n          height: 30,\n          borderRadius: 30 / 2,\n          backgroundColor: COLORS.success,\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }\n      }, React.createElement(MaterialCommunityIcons, {\n        name: \"check\",\n        style: {\n          color: COLORS.white,\n          fontSize: 20\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }\n      })) : option == currentOptionSelected ? React.createElement(View, {\n        style: {\n          width: 30,\n          height: 30,\n          borderRadius: 30 / 2,\n          backgroundColor: COLORS.error,\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }\n      }, React.createElement(MaterialCommunityIcons, {\n        name: \"close\",\n        style: {\n          color: COLORS.white,\n          fontSize: 20\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }\n      })) : null);\n    }));\n  };\n\n  var renderNextButton = function renderNextButton() {\n    if (showNextButton) {\n      return React.createElement(React.Fragment, null, currentQuestionIndex == allQuestions.length - 1 ? React.createElement(TouchableOpacity, {\n        onPress: handleSubmitTest,\n        style: {\n          marginTop: 20,\n          width: \"100%\",\n          backgroundColor: COLORS.accent,\n          padding: 20,\n          borderRadius: 5\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          color: COLORS.white,\n          textAlign: \"center\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }\n      }, \"Submit\")) : React.createElement(TouchableOpacity, {\n        onPress: handleNext,\n        style: {\n          marginTop: 20,\n          width: \"100%\",\n          backgroundColor: COLORS.accent,\n          padding: 20,\n          borderRadius: 5\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          color: COLORS.white,\n          textAlign: \"center\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 15\n        }\n      }, \"Next\")));\n    } else {\n      return null;\n    }\n  };\n\n  var _useState17 = useState(new Animated.Value(0)),\n      _useState18 = _slicedToArray(_useState17, 2),\n      progress = _useState18[0],\n      setProgress = _useState18[1];\n\n  var progressAnim = progress.interpolate({\n    inputRange: [0, allQuestions.length],\n    outputRange: [\"0%\", \"100%\"]\n  });\n\n  var renderProgressBar = function renderProgressBar() {\n    return React.createElement(View, {\n      style: {\n        width: \"100%\",\n        height: 20,\n        borderRadius: 20,\n        backgroundColor: \"#00000020\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 7\n      }\n    }, React.createElement(Animated.View, {\n      style: [{\n        height: 20,\n        borderRadius: 20,\n        backgroundColor: COLORS.accent\n      }, {\n        width: progressAnim\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    barStyle: \"light-content\",\n    backgroundColor: COLORS.primary,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      paddingVertical: 40,\n      paddingHorizontal: 16,\n      backgroundColor: COLORS.background,\n      position: \"relative\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }\n  }, renderProgressBar(), renderQuestion(), renderOptions(), renderNextButton()));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    token: state.auth.token,\n    username: state.auth.username\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    createASNT: function createASNT(token, asnt) {\n      return dispatch(_createASNT(token, asnt));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","map":{"version":3,"sources":["/Users/swalihvpm/Desktop/Projects/django_lms/rnlms/src/Components/unitTest/Questions.js"],"names":["React","useState","connect","axios","createASNT","useNavigation","COLORS","SIZES","MaterialCommunityIcons","Quiz","props","navigation","questions","testID","token","username","allQuestions","currentQuestionIndex","setCurrentQuestionIndex","currentOptionSelected","setCurrentOptionSelected","correctOption","setCorrectOption","isOptionsDisabled","setIsOptionsDisabled","score","setScore","showNextButton","setShowNextButton","showScoreModal","setShowScoreModal","error","setError","validateAnswer","selectedOption","correct_option","console","log","handleSubmitTest","data","err","navigate","id","handleNext","length","Animated","timing","progress","toValue","duration","useNativeDriver","start","restartQuiz","renderQuestion","marginVertical","color","white","fontSize","question","renderOptions","choices","map","option","borderWidth","borderColor","success","secondary","backgroundColor","height","borderRadius","flexDirection","alignItems","justifyContent","paddingHorizontal","width","renderNextButton","marginTop","accent","padding","textAlign","Value","setProgress","progressAnim","interpolate","inputRange","outputRange","renderProgressBar","flex","primary","paddingVertical","background","position","mapStateToProps","state","auth","mapDispatchToProps","dispatch","asnt"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { createASNT } from \"../../store/actions/assignments\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nimport {\n  View,\n  Text,\n  SafeAreaView,\n  StatusBar,\n  Image,\n  TouchableOpacity,\n  Modal,\n  Animated\n} from \"react-native\";\nimport { COLORS, SIZES } from \"../../Helpers/constants\";\n// import { localhost } from \"../../Helpers/urls\";\n// import { authAxios } from \"../../Helpers/authAxios\";\nimport MaterialCommunityIcons from \"react-native-vector-icons/MaterialCommunityIcons\";\n\nconst Quiz = props => {\n  const navigation = useNavigation();\n\n  const { questions, testID, token, username } = props;\n  // console.log(questions);\n\n  const allQuestions = questions;\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentOptionSelected, setCurrentOptionSelected] = useState(null);\n  const [correctOption, setCorrectOption] = useState(null);\n  const [isOptionsDisabled, setIsOptionsDisabled] = useState(false);\n  const [score, setScore] = useState(0);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [showScoreModal, setShowScoreModal] = useState(false);\n  const [error, setError] = useState(false);\n\n  const validateAnswer = selectedOption => {\n    // console.log(allQuestions[currentQuestionIndex][\"answer\"]);\n    let correct_option = allQuestions[currentQuestionIndex][\"answer\"];\n    setCurrentOptionSelected(selectedOption);\n    setCorrectOption(correct_option);\n    setIsOptionsDisabled(true);\n    if (selectedOption == correct_option) {\n      // Set Score\n      console.log(score);\n      setScore(score + 1);\n    }\n    // Show Next Button\n    setShowNextButton(true);\n  };\n\n  const handleSubmitTest = () => {\n    try {\n      // unitId\n      const data = {\n        username,\n        testID,\n        score\n      };\n      props.createASNT(token, data);\n    } catch (err) {\n      setError(err);\n      console.log(err);\n    }\n    navigation.navigate(\"UnitDetail\", { id: testID });\n  };\n\n  const handleNext = () => {\n    console.log(showScoreModal);\n    if (currentQuestionIndex == allQuestions.length - 1) {\n      // Last Question\n      // Show Score Modal\n      // setShowScoreModal(true);\n    } else {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setCurrentOptionSelected(null);\n      setCorrectOption(null);\n      setIsOptionsDisabled(false);\n      setShowNextButton(false);\n    }\n    Animated.timing(progress, {\n      toValue: currentQuestionIndex + 1,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  };\n  const restartQuiz = () => {\n    setShowScoreModal(false);\n\n    setCurrentQuestionIndex(0);\n    setScore(0);\n\n    setCurrentOptionSelected(null);\n    setCorrectOption(null);\n    setIsOptionsDisabled(false);\n    setShowNextButton(false);\n    Animated.timing(progress, {\n      toValue: 0,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  };\n\n  const renderQuestion = () => {\n    return (\n      <View\n        style={{\n          marginVertical: 40\n        }}\n      >\n        {/* Question */}\n        <Text\n          style={{\n            color: COLORS.white,\n            fontSize: 30\n          }}\n        >\n          {allQuestions[currentQuestionIndex]?.question}\n        </Text>\n      </View>\n    );\n  };\n  const renderOptions = () => {\n    return (\n      <View>\n        {allQuestions[currentQuestionIndex]?.choices.map(option => (\n          <TouchableOpacity\n            onPress={() => validateAnswer(option)}\n            disabled={isOptionsDisabled}\n            key={option}\n            style={{\n              borderWidth: 3,\n              borderColor:\n                option == correctOption\n                  ? COLORS.success\n                  : option == currentOptionSelected\n                  ? COLORS.error\n                  : COLORS.secondary + \"40\",\n              backgroundColor:\n                option == correctOption\n                  ? COLORS.success + \"20\"\n                  : option == currentOptionSelected\n                  ? COLORS.error + \"20\"\n                  : COLORS.secondary + \"20\",\n              height: 60,\n              borderRadius: 20,\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              paddingHorizontal: 20,\n              marginVertical: 10\n            }}\n          >\n            <Text style={{ fontSize: 20, color: COLORS.white }}>{option}</Text>\n\n            {/* Show Check Or Cross Icon based on correct answer*/}\n            {option == correctOption ? (\n              <View\n                style={{\n                  width: 30,\n                  height: 30,\n                  borderRadius: 30 / 2,\n                  backgroundColor: COLORS.success,\n                  justifyContent: \"center\",\n                  alignItems: \"center\"\n                }}\n              >\n                <MaterialCommunityIcons\n                  name=\"check\"\n                  style={{\n                    color: COLORS.white,\n                    fontSize: 20\n                  }}\n                />\n              </View>\n            ) : option == currentOptionSelected ? (\n              <View\n                style={{\n                  width: 30,\n                  height: 30,\n                  borderRadius: 30 / 2,\n                  backgroundColor: COLORS.error,\n                  justifyContent: \"center\",\n                  alignItems: \"center\"\n                }}\n              >\n                <MaterialCommunityIcons\n                  name=\"close\"\n                  style={{\n                    color: COLORS.white,\n                    fontSize: 20\n                  }}\n                />\n              </View>\n            ) : null}\n          </TouchableOpacity>\n        ))}\n      </View>\n    );\n  };\n  const renderNextButton = () => {\n    if (showNextButton) {\n      return (\n        <>\n          {currentQuestionIndex == allQuestions.length - 1 ? (\n            <TouchableOpacity\n              onPress={handleSubmitTest}\n              style={{\n                marginTop: 20,\n                width: \"100%\",\n                backgroundColor: COLORS.accent,\n                padding: 20,\n                borderRadius: 5\n              }}\n            >\n              <Text\n                style={{\n                  fontSize: 20,\n                  color: COLORS.white,\n                  textAlign: \"center\"\n                }}\n              >\n                Submit\n              </Text>\n            </TouchableOpacity>\n          ) : (\n            <TouchableOpacity\n              onPress={handleNext}\n              style={{\n                marginTop: 20,\n                width: \"100%\",\n                backgroundColor: COLORS.accent,\n                padding: 20,\n                borderRadius: 5\n              }}\n            >\n              <Text\n                style={{\n                  fontSize: 20,\n                  color: COLORS.white,\n                  textAlign: \"center\"\n                }}\n              >\n                Next\n              </Text>\n            </TouchableOpacity>\n          )}\n        </>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const [progress, setProgress] = useState(new Animated.Value(0));\n  const progressAnim = progress.interpolate({\n    inputRange: [0, allQuestions.length],\n    outputRange: [\"0%\", \"100%\"]\n  });\n  const renderProgressBar = () => {\n    return (\n      <View\n        style={{\n          width: \"100%\",\n          height: 20,\n          borderRadius: 20,\n          backgroundColor: \"#00000020\"\n        }}\n      >\n        <Animated.View\n          style={[\n            {\n              height: 20,\n              borderRadius: 20,\n              backgroundColor: COLORS.accent\n            },\n            {\n              width: progressAnim\n            }\n          ]}\n        ></Animated.View>\n      </View>\n    );\n  };\n\n  return (\n    <SafeAreaView\n      style={{\n        flex: 1\n      }}\n    >\n      <StatusBar barStyle=\"light-content\" backgroundColor={COLORS.primary} />\n      <View\n        style={{\n          flex: 1,\n          paddingVertical: 40,\n          paddingHorizontal: 16,\n          backgroundColor: COLORS.background,\n          position: \"relative\"\n        }}\n      >\n        {/* ProgressBar */}\n        {renderProgressBar()}\n\n        {/* Question */}\n        {renderQuestion()}\n\n        {/* Options */}\n        {renderOptions()}\n\n        {/* Next Button */}\n        {renderNextButton()}\n\n        {/* Score Modal */}\n\n        {/* Background Image */}\n        {/* <Image\n          source={require(\"../assets/images/DottedBG.png\")}\n          style={{\n            width: SIZES.width,\n            height: 130,\n            zIndex: -1,\n            position: \"absolute\",\n            bottom: 0,\n            left: 0,\n            right: 0,\n            opacity: 0.5\n          }}\n          resizeMode={\"contain\"}\n        /> */}\n      </View>\n    </SafeAreaView>\n  );\n};\n\n// export default Quiz;\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    // currentAssignment: state.assignments.currentAssignment,\n    // loading: state.assignments.loading,\n    username: state.auth.username\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    // getASNTSDetail: (token, id) => dispatch(getASNTSDetail(token, id)),\n    createASNT: (token, asnt) => dispatch(createASNT(token, asnt))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Quiz);\n"]},"metadata":{},"sourceType":"module"}