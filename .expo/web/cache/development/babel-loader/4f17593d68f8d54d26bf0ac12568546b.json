{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { Audio } from \"expo-av\";\nexport default function AudioPLayer(_ref) {\n  var mp3 = _ref.mp3,\n      is_system = _ref.is_system,\n      success = _ref.success,\n      failure = _ref.failure;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      Loaded = _React$useState2[0],\n      SetLoaded = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      Loading = _React$useState4[0],\n      SetLoading = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isPlaying = _React$useState6[0],\n      SetIsPlaying = _React$useState6[1];\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      didJustFinish = _React$useState8[0],\n      setDidJustFinish = _React$useState8[1];\n\n  var sound = React.useRef(new Audio.Sound());\n\n  var onPlaybackStatusUpdate = function onPlaybackStatusUpdate(audio) {\n    if (audio) {\n      if (audio.didJustFinish) {\n        setDidJustFinish(true);\n        SetIsPlaying(false);\n      }\n    }\n  };\n\n  React.useEffect(function () {\n    if (is_system) {\n      LoadAudioSystem();\n    }\n\n    if (!is_system) {\n      LoadAudioWeb();\n    }\n\n    sound.current.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    return function () {\n      return Unload();\n    };\n  }, [mp3]);\n\n  var Unload = function Unload() {\n    return _regeneratorRuntime.async(function Unload$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(sound.current.unloadAsync());\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var LoadAudioSystem = function LoadAudioSystem() {\n    var checkLoading, result;\n    return _regeneratorRuntime.async(function LoadAudioSystem$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            SetLoaded(false);\n            SetLoading(true);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(sound.current.getStatusAsync());\n\n          case 4:\n            checkLoading = _context2.sent;\n\n            if (!(checkLoading.isLoaded === false)) {\n              _context2.next = 26;\n              break;\n            }\n\n            _context2.prev = 6;\n\n            if (!success) {\n              _context2.next = 13;\n              break;\n            }\n\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(sound.current.loadAsync(require(\"../../assets/sounds/success.wav\")));\n\n          case 10:\n            _context2.t0 = _context2.sent;\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.next = 15;\n            return _regeneratorRuntime.awrap(sound.current.loadAsync(require(\"../../assets/sounds/failure.wav\")));\n\n          case 15:\n            _context2.t0 = _context2.sent;\n\n          case 16:\n            result = _context2.t0;\n\n            if (result.isLoaded === false) {\n              SetLoading(false);\n              console.log(\"Error in Loading Audio\");\n            } else {\n              SetLoading(false);\n              PlayAudio();\n              SetLoaded(true);\n            }\n\n            _context2.next = 24;\n            break;\n\n          case 20:\n            _context2.prev = 20;\n            _context2.t1 = _context2[\"catch\"](6);\n            console.log(_context2.t1);\n            SetLoading(false);\n\n          case 24:\n            _context2.next = 27;\n            break;\n\n          case 26:\n            SetLoading(false);\n\n          case 27:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[6, 20]], Promise);\n  };\n\n  var LoadAudioWeb = function LoadAudioWeb() {\n    var checkLoading, result;\n    return _regeneratorRuntime.async(function LoadAudioWeb$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            SetLoaded(false);\n            SetLoading(true);\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(sound.current.getStatusAsync());\n\n          case 4:\n            checkLoading = _context3.sent;\n\n            if (!(checkLoading.isLoaded === false)) {\n              _context3.next = 19;\n              break;\n            }\n\n            _context3.prev = 6;\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(sound.current.loadAsync({\n              uri: mp3\n            }));\n\n          case 9:\n            result = _context3.sent;\n\n            if (result.isLoaded === false) {\n              SetLoading(false);\n              console.log(\"Error in Loading Audio\");\n            } else {\n              SetLoading(false);\n              PlayAudio();\n              SetLoaded(true);\n            }\n\n            _context3.next = 17;\n            break;\n\n          case 13:\n            _context3.prev = 13;\n            _context3.t0 = _context3[\"catch\"](6);\n            console.log(_context3.t0);\n            SetLoading(false);\n\n          case 17:\n            _context3.next = 20;\n            break;\n\n          case 19:\n            SetLoading(false);\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[6, 13]], Promise);\n  };\n\n  var PlayAudio = function PlayAudio() {\n    var result;\n    return _regeneratorRuntime.async(function PlayAudio$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(sound.current.getStatusAsync());\n\n          case 3:\n            result = _context4.sent;\n\n            if (result.isLoaded) {\n              if (result.isPlaying === false) {\n                SetIsPlaying(true);\n                sound.current.playAsync();\n              }\n            }\n\n            _context4.next = 10;\n            break;\n\n          case 7:\n            _context4.prev = 7;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(_context4.t0);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return React.createElement(React.Fragment, null);\n}","map":{"version":3,"sources":["/Users/swalihvpm/Desktop/Projects/django_lms/rnlms/src/Helpers/PlayerWithoutControl.js"],"names":["React","MaterialCommunityIcons","Audio","AudioPLayer","mp3","is_system","success","failure","useState","Loaded","SetLoaded","Loading","SetLoading","isPlaying","SetIsPlaying","didJustFinish","setDidJustFinish","sound","useRef","Sound","onPlaybackStatusUpdate","audio","useEffect","LoadAudioSystem","LoadAudioWeb","current","setOnPlaybackStatusUpdate","Unload","unloadAsync","getStatusAsync","checkLoading","isLoaded","loadAsync","require","result","console","log","PlayAudio","uri","playAsync"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { View, Text } from \"react-native\";\nimport MaterialCommunityIcons from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport { Audio } from \"expo-av\";\n\nexport default function AudioPLayer({ mp3, is_system, success, failure }) {\n  // console.log(success, failure);\n  const [Loaded, SetLoaded] = React.useState(false);\n  const [Loading, SetLoading] = React.useState(false);\n\n  const [isPlaying, SetIsPlaying] = React.useState(false);\n  const [didJustFinish, setDidJustFinish] = React.useState(false);\n\n  const sound = React.useRef(new Audio.Sound());\n\n  const onPlaybackStatusUpdate = audio => {\n    if (audio) {\n      if (audio.didJustFinish) {\n        setDidJustFinish(true);\n        SetIsPlaying(false);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    if (is_system) {\n      // console.log(\"system\");\n      LoadAudioSystem();\n    }\n    if (!is_system) {\n      // console.log(\"web\");\n      LoadAudioWeb();\n    }\n\n    sound.current.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    return () => Unload();\n  }, [mp3]);\n\n  const Unload = async () => {\n    await sound.current.unloadAsync();\n  };\n\n  const LoadAudioSystem = async () => {\n    SetLoaded(false);\n    SetLoading(true);\n\n    const checkLoading = await sound.current.getStatusAsync();\n    if (checkLoading.isLoaded === false) {\n      try {\n        const result = success\n          ? await sound.current.loadAsync(\n              require(\"../../assets/sounds/success.wav\")\n            )\n          : await sound.current.loadAsync(\n              require(\"../../assets/sounds/failure.wav\")\n            );\n\n        if (result.isLoaded === false) {\n          SetLoading(false);\n          console.log(\"Error in Loading Audio\");\n        } else {\n          SetLoading(false);\n          PlayAudio();\n          SetLoaded(true);\n        }\n      } catch (error) {\n        console.log(error);\n        SetLoading(false);\n      }\n    } else {\n      SetLoading(false);\n    }\n  };\n\n  const LoadAudioWeb = async () => {\n    SetLoaded(false);\n    SetLoading(true);\n    const checkLoading = await sound.current.getStatusAsync();\n    if (checkLoading.isLoaded === false) {\n      try {\n        const result = await sound.current.loadAsync({\n          uri: mp3\n        });\n        if (result.isLoaded === false) {\n          SetLoading(false);\n          console.log(\"Error in Loading Audio\");\n        } else {\n          SetLoading(false);\n          PlayAudio();\n          SetLoaded(true);\n        }\n      } catch (error) {\n        console.log(error);\n        SetLoading(false);\n      }\n    } else {\n      SetLoading(false);\n    }\n  };\n\n  const PlayAudio = async () => {\n    try {\n      const result = await sound.current.getStatusAsync();\n      if (result.isLoaded) {\n        if (result.isPlaying === false) {\n          SetIsPlaying(true);\n          sound.current.playAsync();\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return <></>;\n}\n"]},"metadata":{},"sourceType":"module"}